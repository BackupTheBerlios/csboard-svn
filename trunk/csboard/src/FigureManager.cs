//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Library General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//
// Copyright (C) 2006 Ravi Kiran UVS

using System;
using System.Collections;
using System.Runtime.InteropServices;
using System.Reflection;
using Cairo;

using System.Threading;
using System.Globalization;

namespace CsBoard
{
	public struct SvgInfo
	{
		public char cmd;
		public double x, y;

		public override string ToString ()
		{
			return String.Format ("{0}: {1}, {2}", cmd, x, y);
		}
	}

	public class SvgFig
	{
		public ArrayList list;
		int width;
		int height;

		public int Width
		{
			get
			{
				return width;
			}
		}

		public int Height
		{
			get
			{
				return height;
			}
		}

		public SvgFig (string svg, int width, int height)
		{
			this.width = width;
			this.height = height;
			list = new ArrayList ();
			// This is to fix the bug which causes Double.Parse to throw an exception
			// when LANG=ru_RU
			// TODO: find a better method of rendering svg
			CultureInfo orig =
				Thread.CurrentThread.CurrentCulture;
			Thread.CurrentThread.CurrentCulture =
				new CultureInfo ("en-us");
			Parse (svg);
			Thread.CurrentThread.CurrentCulture = orig;
		}

		private void Parse (string svg)
		{
			char[] chars = svg.ToCharArray ();
			char cmd = ' ';
			for (int i = 0; i < chars.Length; i++)
			  {
				  if (chars[i] == 'M' || chars[i] == 'L'
				      || chars[i] == 'C')
				    {
					    cmd = chars[i];
					    continue;
				    }
				  if (chars[i] == 'z')
				    {
					    SvgInfo tmpinfo;
					    tmpinfo.cmd = 'z';
					    tmpinfo.x = tmpinfo.y = -1;
					    //list.Add(list[0]);
					    list.Add (tmpinfo);
					    i++;
					    continue;
				    }
				  SvgInfo info;
				  info.cmd = cmd;
				  info.x = ReadNumber (chars, ref i);
				  i++;
				  info.y = ReadNumber (chars, ref i);
				  list.Add (info);
			  }
		}

		private double ReadNumber (char[]chars, ref int i)
		{
			while (chars[i] == ' ')
				i++;
			int j = i;
			while (chars[j] != ',' && chars[j] != ' ')
				j++;
			string str = new string (chars, i, j - i);

			i = j;
			return Double.Parse (str,
					     System.Globalization.
					     NumberStyles.Any);
		}
	}

	public class FigureManager
	{
		public const string black_king =
			"M 653.57940,730.65870 L 671.57940,613.65870 C 725.57940,577.65870 797.57940,514.65870 797.57940,397.65870 C 797.57940,325.65870 734.57940,280.65870 662.57940,280.65870 C 590.57940,280.65870 509.57940,334.65870 509.57940,334.65870 C 509.57940,334.65870 554.57940,190.65870 428.57940,154.65870 L 428.57940,118.65870 L 482.57940,118.65870 L 482.57940,64.658690 L 428.57940,64.658690 L 428.57940,10.658690 L 374.57940,10.658690 L 374.57940,64.658690 L 320.57940,64.658690 L 320.57940,118.65870 L 374.57940,118.65870 L 374.57940,154.65870 C 248.57940,190.65870 293.57940,334.65870 293.57940,334.65870 C 293.57940,334.65870 212.57940,280.65870 140.57940,280.65870 C 68.579380,280.65870 5.5793840,325.65870 5.5793840,397.65870 C 5.5793840,514.65870 77.579380,577.65870 131.57940,613.65870 L 149.57940,730.65870 C 158.57940,757.65870 221.57940,793.65870 401.57940,793.65870 C 581.57940,793.65870 644.57940,757.65870 653.57940,730.65870 z M 374.57940,541.65870 C 329.57940,541.65870 212.57940,550.65870 167.57940,568.65870 C 113.57940,541.65870 59.579380,496.65870 59.579380,406.65870 C 59.579380,352.65870 86.579380,334.65870 149.57940,334.65870 C 212.57940,334.65870 356.57940,397.65870 374.57940,541.65870 z M 428.57940,541.65870 C 446.57940,397.65870 590.57940,334.65870 662.57940,334.65870 C 716.57940,334.65870 743.57940,352.65870 743.57940,406.65870 C 743.57940,496.65870 689.57940,541.65870 635.57940,568.65870 C 590.57940,550.65870 473.57940,541.65870 428.57940,541.65870 z M 617.57940,667.65870 L 608.57940,705.90870 C 437.57940,678.90870 365.57940,678.90870 194.57940,705.90870 L 185.57940,667.65870 C 365.57940,640.65870 437.57940,640.65870 617.57940,667.65870 z M 464.57940,514.65870 C 527.57940,514.65870 581.57940,523.65870 635.57940,541.65870 C 707.57940,487.65870 716.57940,442.65870 716.57940,406.65870 C 716.57940,379.65870 698.57940,361.65870 662.57940,361.65870 C 554.57940,361.65670 473.57940,451.65870 464.57940,514.65870 z M 338.57940,514.65870 C 329.57940,451.65870 239.57940,361.65670 140.57940,361.65870 C 104.57940,361.65870 86.579380,388.65870 86.579380,415.65870 C 86.579380,442.65870 95.579380,487.65870 167.57940,541.65870 C 221.57940,523.65870 275.57940,514.65870 338.57940,514.65870 z ";

		public const string black_queen =
			"M 617.12310,626.00950 C 617.12310,599.00950 627.77310,557.68550 671.12310,536.00950 C 689.12310,527.00950 689.12310,509.00950 689.12310,500.00950 C 689.12310,471.54950 743.12310,203.00950 743.12310,203.00950 C 779.62510,198.74750 796.96610,170.47750 796.96610,144.34650 C 796.96610,112.98940 772.26810,85.907430 738.52810,85.907430 C 710.73310,85.907430 680.56310,109.18740 679.85110,143.63450 C 679.66510,152.63250 681.03910,169.05250 697.43010,186.15650 L 590.12310,392.00950 L 590.12310,158.00950 C 619.03410,151.95050 636.85210,127.48250 636.85210,99.687430 C 636.85210,69.517430 610.72110,42.199430 577.93710,42.199430 C 544.44210,42.199430 519.27910,70.470430 519.73610,102.06340 C 519.97310,118.45540 527.57510,136.03450 545.12410,149.00950 L 464.12410,383.00950 L 428.12410,131.00950 C 452.74310,117.03040 459.86810,97.075430 459.86810,80.208430 C 459.86810,41.011430 428.74910,20.581430 401.19210,20.818430 C 371.26010,21.076430 342.75310,46.950430 342.75310,77.120430 C 342.75310,107.05240 359.14410,122.73150 374.12410,131.00950 L 338.12410,383.00950 L 257.12410,149.00950 C 275.75910,134.13450 282.17310,119.64340 282.17310,98.976430 C 282.17310,77.833430 264.35910,42.199430 223.25910,42.199430 C 190.47610,42.199430 165.29410,70.944430 165.29410,99.926430 C 165.29410,134.84850 190.23910,153.37750 212.12410,158.01050 L 212.12410,392.01050 L 104.12410,185.01050 C 117.78210,170.95350 120.15710,154.06050 120.15710,145.06050 C 120.15710,114.41440 97.114060,85.807430 59.124060,86.010430 C 33.925060,86.146430 3.4010650,109.06240 3.0420650,145.06050 C 2.8040650,168.81650 20.858060,200.88650 59.124060,203.01050 C 59.124060,203.01050 113.12410,473.01050 113.12410,500.01050 C 113.12410,509.01150 113.12410,527.01050 131.12410,536.01050 C 167.12410,554.01150 185.12410,599.01050 185.12410,626.01050 C 185.12410,662.01150 158.12410,698.01150 158.12410,707.01150 C 158.12410,752.01050 320.12410,779.01150 401.12410,778.99150 C 473.12410,778.97350 644.12410,752.01050 644.12410,707.01050 C 644.12410,698.01050 617.12410,671.01050 617.12410,626.01050 L 617.12310,626.00950 z M 594.55210,537.12950 C 583.21810,553.12950 581.21810,558.46250 576.55210,575.12950 C 487.21810,553.79650 327.21810,547.79650 225.88510,575.79650 C 221.21710,557.79650 219.21710,550.46250 208.55110,537.12950 C 325.21710,508.46250 479.21710,506.46250 594.55110,537.12950 L 594.55210,537.12950 z M 570.55210,663.79650 C 555.88510,674.46250 551.21810,682.46250 542.55210,693.79650 C 434.55210,677.12950 363.88410,674.46250 255.21810,693.12950 C 246.55210,679.79650 241.88610,673.12950 229.21810,663.79650 C 341.88610,634.46250 457.88610,644.46250 570.55210,663.79650 L 570.55210,663.79650 z ";

		public const string black_rook =
			"M 232.94440,519.29360 L 124.94440,627.29360 L 124.94440,762.29360 L 682.94440,762.29360 L 682.94440,627.29360 L 574.94440,519.29360 L 574.94440,303.29360 L 682.94440,231.29360 L 682.94440,51.293580 L 520.94440,51.293580 L 520.94440,123.29360 L 484.94440,123.29360 L 484.94440,51.293580 L 322.94440,51.293580 L 322.94440,123.29360 L 286.94440,123.29360 L 286.94440,51.293580 L 124.94440,51.293580 L 124.94440,231.29360 L 232.94440,303.29360 L 232.94440,519.29360 z M 268.94440,321.29360 L 268.94440,285.29360 L 538.94440,285.29360 L 538.94440,321.29360 L 268.94440,321.29360 z M 268.94440,537.29360 L 268.94440,501.29360 L 538.94440,501.29360 L 538.94440,537.29360 L 268.94440,537.29360 z ";

		public const string black_bishop =
			"M 491.6944 453.4443 L 500.6944 482.6943 C 464.6944 455.6943 338.6944 455.6943 302.6944 482.6943 L 311.6944 453.4443 C 332.6944 432.4443 470.6944 432.4443 491.6944 453.4443 z M 509.6944 518.6943 L 518.6944 545.6943 C 470.6944 521.6943 332.6944 521.6943 284.6944 545.6943 L 293.6944 518.6943 C 338.6944 491.6943 464.6944 491.6943 509.6944 518.6943 z M 797.6944 653.6943 C 797.6944 653.6943 752.6944 635.6943 689.6944 626.6943 C 652.9594 621.4463 599.6944 635.6943 554.6944 626.6943 C 518.6944 617.6943 482.6944 599.6943 482.6944 599.6943 L 572.6944 554.6943 L 545.6944 473.6943 C 545.6944 473.6943 608.6944 446.6943 608.6944 365.6943 C 608.6944 302.6943 563.6944 230.6943 500.6944 194.6943 C 455.1304 168.6583 446.6944 149.6943 446.6944 149.6943 C 446.6944 149.6943 482.6944 131.6943 482.6944 86.69433 C 482.6944 50.69433 455.6944 5.694326 401.6944 5.694326 C 347.6944 5.694326 320.6944 50.69433 320.6944 86.69433 C 320.6944 131.6943 356.6944 149.6943 356.6944 149.6943 C 356.6944 149.6943 348.2584 168.6583 302.6944 194.6943 C 239.6944 230.6943 194.6944 302.6943 194.6944 365.6943 C 194.6944 446.6943 257.6944 473.6943 257.6944 473.6943 L 230.6944 554.6943 L 320.6944 599.6943 C 320.6944 599.6943 284.6944 617.6943 248.6944 626.6943 C 204.1734 637.8243 146.9954 621.9373 113.6944 626.6943 C 50.69436 635.6943 5.694364 653.6943 5.694364 653.6943 L 50.69436 797.6943 C 113.6944 779.6943 122.6944 779.6943 176.6944 770.6943 C 209.7864 765.1793 291.5104 774.4223 329.6944 761.6943 C 383.6944 743.6943 401.6944 716.6943 401.6944 716.6943 C 401.6944 716.6943 419.6944 743.6943 473.6944 761.6943 C 511.8784 774.4223 598.4074 767.1583 626.6944 770.6943 C 681.0164 777.4843 752.6944 797.6943 752.6944 797.6943 L 797.6944 653.6943 L 797.6944 653.6943 z M 428.6944 392.6943 L 374.6944 392.6943 L 374.6944 356.6943 L 338.6944 356.6943 L 338.6944 302.6943 L 374.6944 302.6943 L 374.6944 266.6943 L 428.6944 266.6943 L 428.6944 302.6943 L 464.6944 302.6943 L 464.6944 356.6943 L 428.6944 356.6943 L 428.6944 392.6943 z ";

		public const string black_knight =
			"M 84.310370,730.48460 L 564.28850,729.48460 C 563.97550,600.58860 477.97550,556.58860 485.00550,477.74860 L 587.06050,552.58860 C 611.11150,581.44960 637.05150,594.72560 657.36750,594.91660 C 671.53450,595.04960 633.37050,547.08060 627.37050,536.08060 C 653.37050,535.08060 689.37050,585.08060 718.38750,574.11560 C 739.54850,566.12160 754.01750,540.22060 753.06850,502.24260 C 751.70850,447.81260 690.47450,367.52960 667.34250,266.83660 C 641.48850,160.69960 611.91250,147.09260 595.58450,141.64850 L 595.22350,64.085560 L 513.57950,123.95850 L 467.31450,43.675570 L 421.04950,138.92750 C 260.48350,91.300560 89.752370,428.40260 84.309370,730.48460 L 84.310370,730.48460 z M 125.87840,697.92560 C 125.87840,436.61260 289.76850,168.92760 381.72850,167.10560 C 399.37150,167.41260 415.37150,173.41260 415.32750,179.85360 C 415.24050,192.63260 399.02750,197.15260 379.90750,197.15260 C 307.97850,199.88460 158.65640,453.00260 156.83540,695.19560 C 156.83540,713.40460 127.70040,712.49460 125.87940,697.92560 L 125.87840,697.92560 z M 678.74350,471.34160 C 684.09050,477.57960 689.68150,486.16560 689.86350,492.19160 C 690.09450,499.83660 684.07150,505.86160 678.28050,503.54360 C 672.48850,501.22760 665.53850,488.25260 660.90550,485.70560 C 656.27250,483.15660 642.14050,481.30360 642.37250,474.81660 C 642.60450,468.32960 652.10250,462.53760 657.66250,462.76960 C 663.22250,463.00160 675.96450,468.09760 678.74450,471.34160 L 678.74350,471.34160 z M 520.98750,218.08460 C 534.62350,223.81160 559.71450,235.26460 577.44150,255.99260 C 594.62350,278.90060 595.98650,304.80860 596.53150,323.35560 C 566.80450,326.90060 541.87450,318.25160 529.44150,290.90060 C 521.25950,272.90060 520.98650,239.62960 520.98650,218.08460 L 520.98750,218.08460 z ";

		public const string black_pawn =
			"M 688.02380,750.97630 L 688.02380,624.97630 C 688.02380,579.97630 661.62380,452.47630 553.02380,408.97630 C 598.02380,354.97630 607.02380,255.97630 517.02380,192.97630 C 544.02380,156.97630 517.02380,30.976220 409.02380,30.976220 C 301.02380,30.976220 274.02380,156.97630 301.02380,192.97630 C 211.02380,255.97630 220.02380,354.97630 265.02380,408.97630 C 157.02380,453.97630 130.02380,579.97630 130.02380,624.97630 L 130.02380,750.97630 L 688.02380,750.97630 z ";

		public const string white_king =
			"M 648.50000,730.65870 L 666.50000,613.65870 C 720.50000,577.65870 792.50000,514.65870 792.50000,397.65870 C 792.50000,325.65870 729.50000,280.65870 657.50000,280.65870 C 585.50000,280.65870 504.50000,334.65870 504.50000,334.65870 C 504.50000,334.65870 549.50000,190.65870 423.50000,154.65870 L 423.50000,118.65870 L 477.50000,118.65870 L 477.50000,64.658690 L 423.50000,64.658690 L 423.50000,10.658690 L 369.50000,10.658690 L 369.50000,64.658690 L 315.50000,64.658690 L 315.50000,118.65870 L 369.50000,118.65870 L 369.50000,154.65870 C 243.50000,190.65870 288.50000,334.65870 288.50000,334.65870 C 288.50000,334.65870 207.50000,280.65870 135.50000,280.65870 C 63.500000,280.65870 0.50000000,325.65870 0.50000000,397.65870 C 0.50000000,514.65870 72.500000,577.65870 126.50000,613.65870 L 144.50000,730.65870 C 153.50000,757.65870 216.50000,793.65870 396.50000,793.65870 C 576.50000,793.65870 639.50000,757.65870 648.50000,730.65870 z M 396.50000,451.65870 C 396.50000,451.65870 333.50000,343.65870 333.50000,280.65870 C 333.50000,217.65870 369.50000,208.65870 396.50000,208.65870 C 423.50000,208.65870 459.50000,226.65870 459.50000,280.65870 C 459.50000,334.65870 396.50000,451.65870 396.50000,451.65870 z M 369.50000,541.65870 C 324.50000,541.65870 207.50000,550.65870 162.50000,568.65870 C 108.50000,541.65870 54.500000,496.65870 54.500000,406.65870 C 54.500000,352.65870 81.500000,334.65870 144.50000,334.65870 C 207.50000,334.65870 351.50000,397.65870 369.50000,541.65870 z M 423.50000,541.65870 C 441.50000,397.65870 585.50000,334.65870 657.50000,334.65870 C 711.50000,334.65870 738.50000,352.65870 738.50000,406.65870 C 738.50000,496.65870 684.50000,541.65870 630.50000,568.65870 C 585.50000,550.65870 468.50000,541.65870 423.50000,541.65870 z M 612.50000,613.65870 L 603.50000,685.65870 C 432.50000,658.65870 360.50000,658.65870 189.50000,685.65870 L 180.50000,613.65870 C 360.50000,586.65870 432.50000,586.65870 612.50000,613.65870 z M 549.50000,730.65870 C 468.50000,748.65870 441.50000,748.65870 396.50000,748.65870 C 351.50000,748.65870 324.50000,748.65870 243.50000,730.65870 C 324.50000,712.65870 342.50000,712.65870 396.50000,712.65870 C 450.50000,712.65870 468.50000,712.65870 549.50000,730.65870 z ";

		public const string white_queen =
			"M 764.60380,143.65350 C 764.80680,155.66150 755.91880,166.72550 742.61880,166.56350 C 727.46980,166.37750 719.85480,154.92450 719.70980,144.57750 C 719.52480,131.46050 729.68780,121.66950 742.24980,121.66950 C 754.99780,121.66950 764.41980,132.75350 764.60380,143.65350 L 764.60380,143.65350 z M 619.66280,626.00950 C 619.66280,599.00950 630.31280,557.68550 673.66280,536.00950 C 691.66280,527.00950 691.66280,509.00950 691.66280,500.00950 C 691.66280,471.54950 745.66280,203.00950 745.66280,203.00950 C 782.16480,198.74750 799.50580,170.47750 799.50580,144.34650 C 799.50580,112.98950 774.80780,85.907570 741.06780,85.907570 C 713.27280,85.907570 683.10280,109.18750 682.39080,143.63450 C 682.20480,152.63250 683.57880,169.05250 699.96980,186.15650 L 592.66280,392.00950 L 592.66280,158.00950 C 621.57380,151.95050 639.39180,127.48250 639.39180,99.687540 C 639.39180,69.517570 613.26080,42.199570 580.47680,42.199570 C 546.98180,42.199570 521.81880,70.470570 522.27580,102.06350 C 522.51280,118.45550 530.11480,136.03450 547.66380,149.00950 L 466.66380,383.00950 L 430.66380,131.00950 C 455.28280,117.03050 462.40880,97.075540 462.40880,80.208570 C 462.40880,41.011570 431.28880,20.581570 403.73180,20.818570 C 373.79980,21.076570 345.29380,46.950570 345.29380,77.120570 C 345.29380,107.05250 361.68480,122.73150 376.66380,131.00950 L 340.66380,383.00950 L 259.66380,149.00950 C 278.29980,134.13450 284.71380,119.64350 284.71380,98.976540 C 284.71380,77.833570 266.89880,42.199570 225.79980,42.199570 C 193.01680,42.199570 167.83480,70.944570 167.83480,99.926540 C 167.83480,134.84850 192.77880,153.37750 214.66380,158.01050 L 214.66380,392.01050 L 106.66380,185.01050 C 120.32180,170.95350 122.69780,154.06050 122.69780,145.06050 C 122.69780,114.41450 99.654770,85.807570 61.663770,86.010570 C 36.464770,86.146570 5.9407760,109.06250 5.5817760,145.06050 C 5.3447760,168.81650 23.398770,200.88650 61.663770,203.01050 C 61.663770,203.01050 115.66380,473.01050 115.66380,500.01050 C 115.66380,509.01150 115.66380,527.01050 133.66380,536.01050 C 169.66380,554.01150 187.66380,599.01050 187.66380,626.01050 C 187.66380,662.01150 160.66380,698.01150 160.66380,707.01150 C 160.66380,752.01050 322.66380,779.01150 403.66380,778.99150 C 475.66380,778.97350 646.66380,752.01050 646.66380,707.01050 C 646.66380,698.01050 619.66380,671.01050 619.66380,626.01050 L 619.66280,626.00950 z M 87.606770,144.04950 C 87.809770,156.05650 78.921770,167.12050 65.621770,166.95850 C 50.472770,166.77350 42.857770,155.31950 42.712770,144.97350 C 42.527770,131.85650 52.690770,122.06450 65.252770,122.06450 C 78.000770,122.06450 87.422770,133.14950 87.606770,144.04950 z M 603.61080,99.656540 C 603.81380,111.66350 594.92580,122.72750 581.62580,122.56550 C 566.47680,122.38050 558.86180,110.92650 558.71680,100.58050 C 558.53180,87.463540 568.69480,77.671570 581.25680,77.671570 C 594.00480,77.671570 603.42680,88.756540 603.61080,99.656540 L 603.61080,99.656540 z M 426.61880,78.157570 C 426.82180,90.165540 417.93380,101.22950 404.63380,101.06750 C 389.48480,100.88150 381.86980,89.428540 381.72480,79.081570 C 381.53980,65.964570 391.70280,56.173570 404.26480,56.173570 C 417.01280,56.173570 426.43480,67.257570 426.61880,78.157570 z M 249.12780,100.65650 C 249.33080,112.66350 240.44280,123.72750 227.14280,123.56550 C 211.99380,123.38050 204.37880,111.92650 204.23380,101.58050 C 204.04880,88.463540 214.21180,78.671570 226.77380,78.671570 C 239.52180,78.671570 248.94380,89.756540 249.12780,100.65650 z M 578.63980,575.93450 C 569.63980,591.93450 563.63980,630.93450 573.63980,663.93450 C 467.97280,643.60050 338.63980,637.93450 231.63980,663.93450 C 238.63980,638.93450 240.63980,613.93450 227.63980,575.93450 C 320.63980,544.93450 515.63980,553.93450 578.63980,575.93450 L 578.63980,575.93450 z M 537.63980,707.93450 C 489.97280,725.93450 429.97280,726.26850 399.97280,726.26850 C 369.97280,726.26850 308.97280,723.93450 264.63980,708.93450 C 317.63980,697.93450 362.30680,695.60050 397.30680,695.60050 C 432.30680,695.60050 497.97280,700.26850 537.63980,707.93450 z M 210.32980,536.94050 C 210.32980,536.94050 205.66280,530.27350 200.99580,524.94050 C 210.32980,522.27350 232.99580,509.60650 244.32980,494.94050 C 291.66280,508.94050 316.32980,498.94050 350.99580,476.27350 C 384.32980,494.94050 417.66280,494.27350 458.99580,474.94050 C 486.32980,498.27350 515.66280,504.27350 559.66280,495.60650 C 576.32980,512.94050 586.99580,518.94050 604.32980,525.60650 L 596.32980,536.94050 C 454.32980,506.94050 358.99580,506.27350 210.32980,536.94050 L 210.32980,536.94050 z M 691.30580,290.55250 L 654.25080,486.80250 C 626.80380,493.20650 606.21880,481.76950 593.40980,465.30150 L 691.30580,290.55250 z M 553.20180,247.31050 L 550.98680,445.24750 C 523.09080,454.98950 508.03480,450.56150 487.66580,434.17750 L 553.20180,247.31050 z M 401.76580,233.14150 L 433.64780,429.30650 C 416.82180,441.26250 388.48180,443.47650 369.44080,428.74850 L 401.76580,233.14150 z M 252.98380,254.39550 L 318.96280,441.26250 C 304.35080,457.64650 279.55280,464.28750 255.64180,452.77550 L 252.98480,254.39550 L 252.98380,254.39550 z M 116.63980,294.93450 L 212.13980,463.43450 C 201.63980,481.43450 175.13980,492.43450 151.13980,485.43450 L 116.63980,294.93450 z ";

		public const string white_rook =
			"M 227.86510,504.05560 L 119.86510,612.05560 L 119.86510,747.05560 L 677.86510,747.05560 L 677.86510,612.05560 L 569.86510,504.05560 L 569.86510,288.05560 L 677.86510,216.05560 L 677.86510,36.055570 L 515.86510,36.055570 L 515.86510,108.05560 L 479.86510,108.05560 L 479.86510,36.055570 L 317.86510,36.055570 L 317.86510,108.05560 L 281.86510,108.05560 L 281.86510,36.055570 L 119.86510,36.055570 L 119.86510,216.05560 L 227.86510,288.05560 L 227.86510,504.05560 z M 623.86510,90.055570 L 623.86510,180.05560 L 515.86510,252.05560 L 281.86510,252.05560 L 173.86510,180.05560 L 173.86510,90.055570 L 227.86510,90.055570 L 227.86510,162.05560 L 371.86510,162.05560 L 371.86510,90.055570 L 425.86510,90.055570 L 425.86510,162.05560 L 569.86510,162.05560 L 569.86510,90.055570 L 623.86510,90.055570 z M 515.86510,315.05560 L 515.86510,468.05560 L 281.86510,468.05560 L 281.86510,315.05560 L 515.86510,315.05560 z M 623.86510,657.05560 L 623.86510,693.05560 L 173.86510,693.05560 L 173.86510,657.05560 L 623.86510,657.05560 z M 515.86510,531.05560 L 596.86510,603.05560 L 200.86510,603.05560 L 281.86510,531.05560 L 515.86510,531.05560 z ";

		public const string white_bishop =
			"M 404.2341 59.69333 C 422.2341 59.69333 431.2341 68.69333 431.2341 86.69333 C 431.2341 104.6933 422.2341 113.6933 404.2341 113.6933 C 386.2341 113.6933 377.2341 104.6933 377.2341 86.69333 C 377.2341 68.69333 386.2341 59.69333 404.2341 59.69333 z M 404.2341 167.6933 C 440.2341 221.6933 458.2341 221.6933 503.2341 257.6933 C 548.2341 293.6933 557.2341 338.6933 557.2341 374.6943 C 557.2341 410.6933 536.2341 432.2953 512.2341 446.6943 C 512.2341 446.6943 476.2341 428.6943 404.2341 428.6943 C 332.2341 428.6943 296.2341 446.6943 296.2341 446.6943 C 296.2341 446.6943 251.2341 410.6933 251.2341 374.6943 C 251.2341 338.6933 260.2341 293.6933 305.2341 257.6933 C 350.2341 221.6933 368.2341 221.6933 404.2341 167.6933 z M 503.2341 482.6943 L 512.2341 509.6943 C 467.2341 491.6943 341.2341 491.6943 296.2341 509.6943 L 305.2341 482.6943 C 341.2341 464.6943 467.2341 464.6943 503.2341 482.6943 z M 404.2341 536.6943 C 440.2341 536.6953 494.2341 545.6943 494.2341 545.6943 C 494.2341 545.6943 440.2341 554.6943 404.2341 554.6943 C 368.2341 554.6943 314.2341 545.6953 314.2341 545.6953 C 314.2341 545.6953 368.2341 536.6933 404.2341 536.6943 z M 440.2341 635.6943 C 494.2341 671.6943 503.5961 666.6033 539.2341 671.6943 C 602.2341 680.6943 628.1611 676.0153 656.2341 680.6943 C 710.2341 689.6943 737.2341 698.6943 737.2341 698.6943 L 719.2341 743.6943 C 719.2341 743.6943 710.6641 732.1843 665.2341 725.6943 C 602.2341 716.6943 548.2341 716.6943 503.2341 707.6943 C 458.2341 698.6943 422.2341 680.6943 404.2341 662.6943 C 386.8481 680.0803 350.2341 698.6943 305.2341 707.6943 C 260.2341 716.6943 207.4831 712.8443 143.2341 725.6943 C 98.23404 734.6943 89.23404 743.6943 89.23404 743.6943 L 71.23404 698.6943 C 71.23404 698.6943 98.23404 689.6943 152.2341 680.6943 C 176.7781 676.6033 206.2341 680.6943 269.2341 671.6943 C 305.9691 666.4463 314.2341 671.6943 368.2341 635.6943 L 440.2341 635.6943 z M 431.2341 266.6943 L 377.2341 266.6943 L 377.2341 302.6943 L 341.2341 302.6943 L 341.2341 356.6943 L 377.2341 356.6943 L 377.2341 392.6943 L 431.2341 392.6943 L 431.2341 356.6943 L 467.2341 356.6943 L 467.2341 302.6943 L 431.2341 302.6943 L 431.2341 266.6943 z M 800.2341 653.6943 C 800.2341 653.6943 755.2341 635.6943 692.2341 626.6943 C 655.4991 621.4463 602.2341 635.6943 557.2341 626.6943 C 521.2341 617.6943 485.2341 599.6943 485.2341 599.6943 L 575.2341 554.6943 L 548.2341 473.6943 C 548.2341 473.6943 611.2341 446.6943 611.2341 365.6943 C 611.2341 302.6943 566.2341 230.6943 503.2341 194.6943 C 457.6701 168.6583 449.2341 149.6943 449.2341 149.6943 C 449.2341 149.6943 485.2341 131.6943 485.2341 86.69433 C 485.2341 50.69433 458.2341 5.694326 404.2341 5.694326 C 350.2341 5.694326 323.2341 50.69433 323.2341 86.69433 C 323.2341 131.6943 359.2341 149.6943 359.2341 149.6943 C 359.2341 149.6943 350.7981 168.6583 305.2341 194.6943 C 242.2341 230.6943 197.2341 302.6943 197.2341 365.6943 C 197.2341 446.6943 260.2341 473.6943 260.2341 473.6943 L 233.2341 554.6943 L 323.2341 599.6943 C 323.2341 599.6943 287.2341 617.6943 251.2341 626.6943 C 206.7131 637.8243 149.5351 621.9373 116.2341 626.6943 C 53.23404 635.6943 8.234037 653.6943 8.234037 653.6943 L 53.23404 797.6943 C 116.2341 779.6943 125.2341 779.6943 179.2341 770.6943 C 212.3261 765.1793 294.0501 774.4223 332.2341 761.6943 C 386.2341 743.6943 404.2341 716.6943 404.2341 716.6943 C 404.2341 716.6943 422.2341 743.6943 476.2341 761.6943 C 514.4181 774.4223 600.9471 767.1583 629.2341 770.6943 C 683.5561 777.4843 755.2341 797.6943 755.2341 797.6943 L 800.2341 653.6943 L 800.2341 653.6943 z ";

		public const string white_knight =
			"M 76.688770,727.94590 L 556.66680,726.94590 C 556.35380,598.04990 470.35380,554.04990 477.38380,475.20990 L 579.43880,550.04990 C 620.25980,599.03590 666.52580,603.11790 681.49380,574.54390 C 715.51280,581.34690 746.80780,554.13390 745.44780,499.70390 C 744.08780,445.27390 682.85280,364.99090 659.72080,264.29690 C 633.86680,158.15990 604.29080,144.55290 587.96280,139.10890 L 587.60180,61.545870 L 505.95780,121.41890 L 459.69280,41.135870 L 413.42780,136.38790 C 252.86280,88.761870 82.131770,425.86390 76.688770,727.94590 z M 505.95780,677.95990 L 126.31380,677.95990 C 205.68580,187.71690 362.68580,154.71690 437.92180,193.53890 L 462.41480,144.55290 L 481.46480,178.57090 L 567.19080,198.98090 L 576.71580,189.45790 C 597.12680,205.78590 608.14980,284.03590 634.35280,350.71790 C 662.29280,421.82190 697.90980,477.31990 697.82080,496.98190 C 697.68580,526.71790 689.01880,532.71790 671.96680,525.55790 C 663.68580,512.04990 655.01880,500.71790 639.30980,499.70390 C 632.35280,500.04990 621.14380,503.00890 631.68580,509.71790 C 646.35280,519.04990 642.75180,540.16490 642.75180,540.16490 C 616.01880,518.71790 515.25280,437.01890 459.69280,401.73090 C 442.35180,390.71690 426.68480,380.71690 414.68480,350.21690 C 390.82180,377.37090 416.35180,430.71690 431.68480,444.04890 C 408.35180,536.04890 484.35180,618.71690 505.95680,677.95890 L 505.95780,677.95990 z M 682.04780,490.00990 C 682.04780,485.18590 675.98380,472.91790 669.91880,467.95690 C 663.85480,462.99390 654.48180,460.23590 648.96880,460.37490 C 643.45580,460.51390 634.49680,465.74990 634.90980,472.36690 C 635.32280,478.98190 647.17680,480.77490 651.86280,482.56590 C 656.54880,484.35690 662.88880,496.62590 669.50480,500.75990 C 676.12080,504.89390 682.04780,496.67790 682.04780,490.00990 L 682.04780,490.00990 z M 588.45680,320.97290 C 588.11380,280.48690 578.16380,263.67390 566.49780,249.26390 C 554.83180,234.85190 512.97280,215.29490 512.97280,215.29490 C 512.97280,215.29490 508.16880,266.41790 525.66780,296.26990 C 543.16680,326.11990 570.61480,321.31690 588.45680,320.97290 L 588.45680,320.97290 z ";

		public const string white_pawn =
			"M 688.02380,753.51590 L 688.02380,627.51590 C 688.02380,582.51590 661.62380,455.01590 553.02380,411.51590 C 598.02380,357.51590 607.02380,258.51590 517.02380,195.51590 C 544.02380,159.51590 517.02380,33.515900 409.02380,33.515900 C 301.02380,33.515900 274.02380,159.51590 301.02380,195.51590 C 211.02380,258.51590 220.02380,357.51590 265.02380,411.51590 C 157.02380,456.51590 130.02380,582.51590 130.02380,627.51590 L 130.02380,753.51590 L 688.02380,753.51590 z M 409.02380,87.515900 C 490.02380,87.515900 490.02380,177.51590 454.02380,213.51590 C 562.02380,258.51590 535.02380,375.51590 481.02380,429.51590 C 571.02380,456.51590 634.02380,546.51590 634.02380,609.51590 L 634.02380,699.51590 L 184.02380,699.51590 L 184.02380,609.51590 C 184.02380,546.51590 247.02380,456.51590 337.02380,429.51590 C 283.02380,375.51590 256.02380,258.51590 364.02380,213.51590 C 328.02380,177.51590 328.02380,87.515900 409.02380,87.515900 z ";

		Hashtable map;
		Hashtable pointsMap;
		public FigureManager ()
		{
			map = new Hashtable ();
			pointsMap = new Hashtable ();

			int width = 800;
			int height = 800;

			  map[FigureType.WhiteKing] =
				new SvgFig (white_king, width, height);
			  map[FigureType.BlackKing] =
				new SvgFig (black_king, width, height);

			  map[FigureType.WhiteQueen] =
				new SvgFig (white_queen, width, height);
			  map[FigureType.BlackQueen] =
				new SvgFig (black_queen, width, height);

			  map[FigureType.WhiteBishop] =
				new SvgFig (white_bishop, width, height);
			  map[FigureType.BlackBishop] =
				new SvgFig (black_bishop, width, height);

			  map[FigureType.WhiteKnight] =
				new SvgFig (white_knight, width, height);
			  map[FigureType.BlackKnight] =
				new SvgFig (black_knight, width, height);

			  map[FigureType.WhiteRook] =
				new SvgFig (white_rook, width, height);
			  map[FigureType.BlackRook] =
				new SvgFig (black_rook, width, height);

			  map[FigureType.WhitePawn] =
				new SvgFig (white_pawn, width, height);
			  map[FigureType.BlackPawn] =
				new SvgFig (black_pawn, width, height);
		}

		public void SetSize (int size)
		{
			pointsMap.Clear ();
			foreach (DictionaryEntry de in map)
			{
				SvgFig fig = (SvgFig) de.Value;
				pointsMap[de.Key] =
					GetScaledPoints (fig, size);
			}
		}

		public ArrayList GetPoints (FigureType type)
		{
			ArrayList list = (ArrayList) pointsMap[type];
			return list;
		}

		private ArrayList GetScaledPoints (SvgFig fig, int size)
		{
			ArrayList list = new ArrayList ();
			foreach (SvgInfo info in fig.list)
			{
				SvgInfo info1;
				info1.cmd = info.cmd;
				info1.x = (size * info.x) / fig.Width;
				info1.y = (size * info.y) / fig.Height;
				list.Add (info1);
			}

			return list;
		}
	}
}
